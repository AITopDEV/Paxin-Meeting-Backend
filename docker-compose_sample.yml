services:
  postgres:
    image: postgres:16.1-alpine
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "paxintrade", "-d", "paxintrade"]
      interval: 1s
      timeout: 5s
      retries: 10
    environment:
      POSTGRES_USER: paxintrade
      POSTGRES_PASSWORD: <password>
      POSTGRES_DB: paxintrade
    # ports:
    #   - "5432:5432"
    volumes:
      - ../server-data/postgres-data:/var/lib/postgresql/data
    command:
      ["postgres", "-c", "wal_level=logical", "-c", "wal_writer_delay=10ms"]

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    # ports:
    #     - "6379:6379"

  rabbitmq:
    image: rabbitmq:3-management-alpine
    restart: unless-stopped
    # ports:
    #   # - 5672:5672 # for sender and consumer connections
    #   - 15672:15672 # for serve RabbitMQ GUI
    volumes:
      - ../server-data/rabbitmq-data:/var/lib/rabbitmq
      - ../server-data/rabbitmq-logs:/var/log/rabbitmq

  centrifugo:
    image: centrifugo/centrifugo:v5.2.0
    restart: unless-stopped
    volumes:
      - ./centrifugo/config.json:/centrifugo/config.json
    command: centrifugo -c config.json
    expose:
      - 8000
    depends_on:
      postgres:
        condition: service_healthy
      # kafka:
      #   condition: service_healthy

  # zookeeper:
  #   image: confluentinc/cp-zookeeper:7.4.3
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: 2181
  #     ZOOKEEPER_TICK_TIME: 2000

  # kafka:
  #   image: confluentinc/cp-kafka:7.4.3
  #   depends_on:
  #     - zookeeper
  #   ports:
  #     - "29092:29092"
  #   expose:
  #     - 9092
  #   healthcheck:
  #     test:
  #       [
  #         "CMD",
  #         "kafka-topics",
  #         "--list",
  #         "--bootstrap-server",
  #         "localhost:9092",
  #       ]
  #     interval: 2s
  #     timeout: 5s
  #     retries: 10
  #   environment:
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  #     KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #     KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
  #     KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
  #     KAFKA_MAX_REQUEST_SIZE: "10485760"
  #     KAFKA_MESSAGE_MAX_BYTES: "10485760"
  #     KAFKA_MAX_PARTITION_FETCH_BYTES: "10485760"

  # connect:
  #   image: debezium/connect:2.5
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #     kafka:
  #       condition: service_healthy
  #   ports:
  #     - "8083:8083"
  #   environment:
  #     BOOTSTRAP_SERVERS: kafka:9092
  #     GROUP_ID: 1
  #     CONFIG_STORAGE_TOPIC: connect_configs
  #     OFFSET_STORAGE_TOPIC: connect_offsets
  #     STATUS_STORAGE_TOPIC: connect_statuses

  # connect-config-loader:
  #   image: appropriate/curl:latest
  #   depends_on:
  #     - connect
  #   volumes:
  #     - ./debezium/debezium-config.json:/debezium-config.json
  #   command: >
  #     /bin/sh -c "
  #       echo 'Waiting for Kafka Connect to start...';
  #       while ! curl -f http://connect:8083/connectors; do sleep 1; done;
  #       echo 'Kafka Connect is up, posting configuration';
  #       curl -X DELETE -H 'Content-Type: application/json' http://connect:8083/connectors/grandchat-chat-connector;
  #       curl -X POST -H 'Content-Type: application/json' -v --data @/debezium-config.json http://connect:8083/connectors;
  #       echo 'Configuration posted';
  #     "

  paxintrade-api:
    build:
      context: .
      dockerfile: Dockerfile.prod # Dockerfile.dev when development mode, Dockerfile.prod when production mode
    restart: always
    image: paxintrade-api:latest-prod # paxintrade-api:latest-dev when development mode, paxintrade-api:latest-prod when production mode
    ports:
      - "8000:8000/tcp"
    volumes:
      # - .:/app # need when development mode
      - ./app.env:/app/app.env # need when production mode
      - ../server-data/img-store:/server-data/img-store
    depends_on:
      - redis
      - rabbitmq
      - postgres
