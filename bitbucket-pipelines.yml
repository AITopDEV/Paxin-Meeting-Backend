definitions:
  steps:
    - &check_changes_step
      name: "Check Main Files and Directories for Changes"
      image: alpine/git
      script:
        - |
          echo "Checking for changes in specific directories/files..."
          CHANGED_FILES=$(git diff-tree -m --no-commit-id --name-only -r $BITBUCKET_COMMIT)
          echo "Changed files/directories: $CHANGED_FILES"

          CHECKED_PATHS="should_build|api|cmd|controllers|docs|initializers|middleware|migrate|models|routes|templates|utils|views|.air.toml|go.mod|go.sum|Dockerfile.prod"
          SHOULD_BUILD=1

          if echo "$CHANGED_FILES" | grep -Eq $CHECKED_PATHS; then
            echo "Relevant changes detected. Proceeding with build..."
          else
            echo "No relevant changes in critical paths. Skipping build and push step."
            SHOULD_BUILD=0
          fi

          BUILD_CHECK_ENV=build_check_env
          echo "export SHOULD_BUILD=$SHOULD_BUILD" > $BUILD_CHECK_ENV
      artifacts:
        - build_check_env

pipelines:
  branches:
    main:
      - step: *check_changes_step
      - step:
          name: "Build and Test"
          image: golang:1.21-alpine
          script:
            - chmod +x build_check_env
            - source build_check_env
            - |
              if [ "$SHOULD_BUILD" -eq "1" ]; then
                echo "Building Golang API..."

                echo "Tidying and verifying module dependencies..."
                go mod tidy
                go mod verify

                echo "Downloading dependencies..."
                go mod download

                echo "Building the application..."
                GO111MODULE=on go build -v -o bin/myru-api cmd/main.go

                if [ $? -ne 0 ]; then
                    echo "Build failed."
                    exit 1
                else
                    echo "Build succeeded."
                fi
              else
                echo "Skipping build and push step as per previous step's decision."
                exit 0
              fi

    release/prod:
      - step: *check_changes_step
      - step:
          name: "Build and Push Docker Image to ECR"
          image: alpine
          size: 2x
          services:
            - docker
          caches:
            - docker
          script:
            - chmod +x build_check_env
            - source build_check_env
            - |
              if [ "$SHOULD_BUILD" -eq "1" ]; then
                echo "Building and pushing Docker image to ECR..."
                # Define environment values
                export IMAGE_NAME=myru-api
                export IMAGE_TAG=$(echo $BITBUCKET_COMMIT | cut -c 1-7)
                export IMAGE_LATEST_TAG=latest-prod

                # Install AWS-CLI
                #apk add --no-cache aws-cli
                apk add --no-cache python3 py3-pip
                python3 -m venv /tmp/venv
                source /tmp/venv/bin/activate
                pip3 install awscli
                # Login to AWS ECR
                aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin $REPOSITORY_URI

                # Build and tag the Docker image
                docker build -f Dockerfile.dev -t $IMAGE_NAME .
                docker tag $IMAGE_NAME $REPOSITORY_URI/$IMAGE_NAME:$IMAGE_TAG
                docker tag $IMAGE_NAME $REPOSITORY_URI/$IMAGE_NAME:$IMAGE_LATEST_TAG
                # Push the Docker image to AWS ECR
                docker push $REPOSITORY_URI/$IMAGE_NAME:$IMAGE_TAG
                docker push $REPOSITORY_URI/$IMAGE_NAME:$IMAGE_LATEST_TAG
              else
                echo "Skipping build and push step as per previous step's decision."
                exit 0
              fi
      - step:
          name: "Deploy to Production Environment"
          deployment: Production
          image: alpine/git
          script:
            - echo "Deploying to production environment"
            # Install AWS-CLI
            #- apk add --no-cache aws-cli            
            - apk add --no-cache python3 py3-pip
            - python3 -m venv /tmp/venv
            - source /tmp/venv/bin/activate
            - pip3 install awscli
            # Login to AWS ECR
            - export ECR_PASSWORD=$(aws ecr get-login-password --region $REGION)

            # Deploy to Production
            - chmod +x ./deploy_release-prod.sh
            - ./deploy_release-prod.sh
